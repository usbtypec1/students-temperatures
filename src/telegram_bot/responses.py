import random
from typing import Optional, Union, Iterable

from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup

__all__ = (
    'KeyboardMarkup',
    'Response',
)

import db
from telegram_bot.keyboards import markups

KeyboardMarkup = Union[ReplyKeyboardMarkup, InlineKeyboardMarkup]


class Response:

    def get_chat_id(self) -> Optional[int]:
        """Override if you want to send response to certain chat."""

    def get_text(self) -> Optional[str]:
        """Override if you want to return any text."""

    def get_reply_markup(self) -> Optional[KeyboardMarkup]:
        """Override if you want to return any type of keyboard markup."""


class AdminMenuResponse(Response):

    def get_text(self) -> Optional[str]:
        return '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üë®‚Äçüíª'

    def get_reply_markup(self) -> Optional[KeyboardMarkup]:
        return markups.AdminMenuMarkup()


class MarkTemperatureNotificationResponse(Response):
    __slots__ = ('__chat_id',)

    def __init__(self, chat_id: int):
        self.__chat_id = chat_id

    def get_chat_id(self) -> Optional[int]:
        return self.__chat_id

    def get_text(self) -> Optional[str]:
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ –≤–∞—à—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É ‚ùóÔ∏è'


class NotificationsSentResponse(Response):

    def get_text(self) -> Optional[str]:
        return '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üëå'


class ClassmatesListResponse(Response):
    __slots__ = ('__users',)

    __emojis = ('‚ù§Ô∏è', 'üåà', 'üí©', '‚ö°Ô∏è', '‚ò†Ô∏è', 'üß°', 'üíó', 'üëë', 'üê∫',
                'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', '‚ò¢', 'üê±', 'üêΩ', 'üçÜ', 'üçë')

    def __init__(self, users: Iterable[db.User]):
        self.__users = users

    def get_text(self) -> str:
        if not self.__users:
            return '–£ –≤–∞—Å –Ω–µ—Ç –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤ üòï'
        lines = ['<b>–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏:</b>']
        lines += [f'{random.choice(self.__emojis)} {user.first_name.title()}'
                  for user in self.__users]
        return '\n'.join(lines)


class TemperaturesHistoryResponse(Response):
    __slots__ = ('__temperature_records',)

    def __init__(self, temperature_records: Iterable[db.TemperatureRecord]):
        self.__temperature_records = temperature_records

    def get_text(self) -> Optional[str]:
        if not self.__temperature_records:
            return '–í—ã –ø–æ–∫–∞ –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏ —Å–≤–æ—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É üò¢'
        lines = ['<b>–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –æ—Ç–º–µ—Ç–æ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä:</b>']
        for record in self.__temperature_records:
            line = (f'{record.recorded_at_date:%d.%m.%Y} {record.edited_at_time:%H:%M}'
                    f' - <b>{record.temperature_value} ¬∞C</b>')
            if record.recorded_by is not None:
                line += f' ({record.recorded_by.first_name.title()})'
            lines.append(line)
        return '\n'.join(lines)


class MarkTemperatureFAQResponse(Response):

    def get_text(self) -> Optional[str]:
        lines = (
            '–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë —Å—é–¥–∞',
            'üëâ –ù–∞–ø—Ä–∏–º–µ—Ä: <i>36.9</i>\n',
            '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–∞ —Å–≤–æ–µ–≥–æ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞,'
            ' –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ: \n<i>42.6 –ê—Å—Ö–∞—Ç</i> –∏–ª–∏ <i>36.9 –ú–∏–Ω –¥–∂—É</i>\n',
            '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–º–µ–Ω–∞ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –∑–∞–±—ã–ª),'
            ' –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"üë¶ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏"</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /classmates')
        return '\n'.join(lines)


class ClassmateTemperatureAlreadyMarkedResponse(Response):

    def get_text(self) -> Optional[str]:
        return '–≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª —Å–µ–±–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É üëå'


class ClassmateTemperatureSuccessfullyMarkedResponse(Response):
    __slots__ = ('__classmate_user', '__temperature')

    def __init__(self, classmate_user: db.User, temperature: float):
        self.__classmate_user = classmate_user
        self.__temperature = temperature

    def get_text(self) -> Optional[str]:
        return (f'–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —É—á–µ–Ω–∏–∫—É {self.__classmate_user.first_name.title()}'
                f' –∫–∞–∫ {self.__temperature:.1f} üåü')


class OwnTemperatureMarkedByClassmateResponse(Response):
    __slots__ = ('__chat_id', '__current_user', '__temperature')

    def __init__(self, chat_id: int, current_user: db.User, temperature: float):
        self.__chat_id = chat_id
        self.__current_user = current_user
        self.__temperature = temperature

    def get_chat_id(self) -> Optional[int]:
        return self.__chat_id

    def get_text(self) -> Optional[str]:
        return (f'{self.__current_user.first_name.title()} –æ—Ç–º–µ—Ç–∏–ª'
                f' –≤–∞–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É {self.__temperature:.1f} üåü')


class MyTemperatureMarkedResponse(Response):

    def get_text(self) -> Optional[str]:
        return '–í–∞—à–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ üòç'


class MainMenuResponse(Response):

    def get_text(self) -> Optional[str]:
        return '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª'

    def get_reply_markup(self) -> Optional[KeyboardMarkup]:
        return markups.MainMenuMarkup()


class MarkedTemperaturesReportResponse(Response):
    __slots__ = ('__records',)

    def __init__(self, records: Iterable[db.TemperatureRecord]):
        self.__records = records

    def get_text(self) -> Optional[str]:
        if not self.__records:
            return '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —Å–≤–æ—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É üòï'
        lines = ['<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—á–µ–Ω–∏–∫–æ–≤:</b>']
        lines += [f'{report.student.first_name.title()}: {report.temperature_value:.1f}'
                  for report in self.__records]
        return '\n'.join(lines)


class StudentsWithoutTemperatureRecordsResponse(Response):
    __slots__ = ('__users_without_records',)

    def __init__(self, users_without_records: Iterable[db.User]):
        self.__users_without_records = users_without_records

    def get_text(self) -> Optional[str]:
        if not self.__users_without_records:
            return '–í—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É ü•≥'
        lines = ['<b>–ï—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:</b>']
        lines += [f'{user.first_name.title()}' for user in self.__users_without_records]
        return '\n'.join(lines)

    def get_reply_markup(self) -> Optional[KeyboardMarkup]:
        if self.__users_without_records:
            return markups.NotMarkedTemperaturesMenuMarkup()
